<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuChoice = 1;
flavorText = "Flavor text"
flavorText2 = " "

arrowTimer = 0;
arrowTimerMode = 0; // 0 - plus, 1 - minus
arrowY = 16;

timer = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kUp = keyboard_check_released(vk_up) || gamepad_button_check_released(0,gp_padu)
kDown = keyboard_check_released(vk_down) || gamepad_button_check_released(0,gp_padd)
kConfirm = keyboard_check_released(ord("Z")) || keyboard_check_released(ord("X")) || gamepad_button_check_released(0, gp_face1);

if keyboard_check_released(vk_f4)
{
    if !window_get_fullscreen() window_set_fullscreen(true);
    else window_set_fullscreen(false);
}

if keyboard_check_released(vk_escape) game_end();

// Arrow boi (Back and forth movement)
if arrowTimerMode == 0
{
    if arrowTimer &gt; 5
    {
        arrowTimerMode = 1 //minus
    }
    arrowTimer += 0.5
}
else if arrowTimerMode == 1
{
    if arrowTimer &lt; 0
    {
        arrowTimerMode = 0
    }
    arrowTimer -= 0.5
}

/* draw_text(view_xview[0]/2+128, (view_yview[0]/2)+48, "NEW GAME")
draw_text(view_xview[0]/2+128, (view_yview[0]/2)+64, "LOAD GAME")
draw_text(view_xview[0]/2+128, (view_yview[0]/2)+80, "OPTIONS")
draw_text(view_xview[0]/2+128, (view_yview[0]/2)+96, "QUIT GAME") */

// Recognize input
if kDown
{
if menuChoice &lt; 7 { menuChoice += 1 }
}

if kUp
{
if menuChoice &gt; 1 { menuChoice -= 1 }
}

// Update flavor text
if menuChoice == 1 { flavorText = "Test your controller" }
else if menuChoice == 2 { flavorText = "Test the movement of the player" }
else if menuChoice == 3 { flavorText = "-" }
else if menuChoice == 4 { flavorText = "Load data from drive" }
else if menuChoice == 5 { flavorText = "Save data to drive" }
else if menuChoice == 6 { flavorText = "-" }
else if menuChoice == 7 { flavorText = "End the test" }

// Arrow Y
if menuChoice == 1 { arrowY = 16 }
else if menuChoice == 2 { arrowY = 32 }
else if menuChoice == 3 { arrowY = 48 }
else if menuChoice == 4 { arrowY = 64 }
else if menuChoice == 5 { arrowY = 80 }
else if menuChoice == 6 { arrowY = 96 }
else if menuChoice == 7 { arrowY = 112 }
// Confirm
if kConfirm
{
    if menuChoice == 1
    {
        room_goto(rmTestController);
        audio_stop_all();
    }
    
    else if menuChoice == 2
    {
        audio_stop_all();
        room_goto(rmTestMovement);
    }
    
    else if menuChoice == 3
    {
        audio_play_sound(sndMenuNavigate,0,false);
        instance_create(0,0,objACEMenuPage2);
        instance_destroy();
    }
    
    else if menuChoice == 4
    {
        audio_play_sound(sndMenuNavigate,0,false);
        instance_create(0,0,objLoadDataObj);
    }
    
    else if menuChoice == 5
    {
        audio_play_sound(sndMenuNavigate,0,false);
        instance_create(0,0,objSaveDataObj);
    }
    
    else if menuChoice == 7
    {
        game_end();
    }
    
    else
    {
        audio_play_sound(sndDeny,9,false);
    }
}

// Sound

if kUp || kDown
{
    audio_play_sound(sndMenuNavigate, 9, false)
}

// Timer for flavortext

if flavorText2 != ""
{
    timer += 1;
    if timer == 60 flavorText2 = " ";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0)
draw_set_halign(fa_left);
draw_set_color(c_white)

draw_text(view_xview[0]/2+32, (view_yview[0]/2)+16, "Test controller")
draw_text(view_xview[0]/2+32, (view_yview[0]/2)+32, "Test movement")
draw_text(view_xview[0]/2+32, (view_yview[0]/2)+48, "Test special screens")
draw_text(view_xview[0]/2+32, (view_yview[0]/2)+64, "Load game data")
draw_text(view_xview[0]/2+32, (view_yview[0]/2)+80, "Save game data")
draw_text(view_xview[0]/2+32, (view_yview[0]/2)+96, "-")
draw_text(view_xview[0]/2+32, (view_yview[0]/2)+112, "End game")

draw_set_color(c_white)
draw_set_halign(fa_center);
draw_text(view_xview[0]/2+128, (view_yview[0]/2)+176, "Arbitrary Code Execution Menu");
draw_text(view_xview[0]/2+128, (view_yview[0]/2)+192, flavorText);
draw_text(view_xview[0]/2+128, (view_yview[0]/2)+208,flavorText2);

draw_set_halign(fa_left);
draw_sprite(sprMenuArrow, 0, (view_xview[0]+16) + arrowTimer, view_yview[0] + arrowY + 2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
