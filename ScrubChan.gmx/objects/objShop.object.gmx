<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuChoice = 1;
flavorText = "A CHOICE HAS YET TO BE MADE!"

arrowTimer = 0;
arrowTimerMode = 0; // 0 - plus, 1 - minus
arrowY = 16;

menuArea = "main";

screenres = "2X";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var displayWidth = display_get_width();
var displayHeight = display_get_height();
var screenMode = global.screenMode;


if !(instance_exists(objMainMenu_SelDifficulty))
{
kUp = keyboard_check_released(vk_up)
kDown = keyboard_check_released(vk_down)
kConfirm = keyboard_check_released(ord("X"))

kUpGP = gamepad_button_check_released(0, gp_padu)
kDownGP = gamepad_button_check_released(0,gp_padd)
kConfirmGP = gamepad_button_check_released(0,gp_face1)

if gamepad_is_connected(0)
{
    if kUpGP kUp = 1;
    if kDownGP kDown = 1;
    if kConfirmGP kConfirm = 1;
}

// Arrow boi (Back and forth movement)
if arrowTimerMode == 0
{
    if arrowTimer &gt; 4
    {
        arrowTimerMode = 1 //minus
    }
    arrowTimer += 0.5
}
else if arrowTimerMode == 1
{
    if arrowTimer &lt; 0
    {
        arrowTimerMode = 0
    }
    arrowTimer -= 0.5
}

// Recognize input
if kDown
{
if menuChoice &lt; 7 { menuChoice += 1 }
else menuChoice = 1;
}

if kUp
{
if menuChoice &gt; 1 { menuChoice -= 1 }
else menuChoice = 7;
}

// Update flavor text
if menuArea == "main" // MAIN MENU
{
    if menuChoice == 1 { flavorText = "20" }
    else if menuChoice == 2 { flavorText = "50" }
    else if menuChoice == 3 { flavorText = "50" }
    else if menuChoice == 4 { flavorText = "100" }
    else if menuChoice == 5 { flavorText = "100" }
    else if menuChoice == 6 { flavorText = "250" }
    else if menuChoice == 7 { flavorText = "BACK" }
}

// Arrow Y
if menuChoice == 1 { arrowY = 48 }
else if menuChoice == 2 { arrowY = 64 }
else if menuChoice == 3 { arrowY = 80 }
else if menuChoice == 4 { arrowY = 96 }
else if menuChoice == 5 { arrowY = 112 }
else if menuChoice == 6 { arrowY = 128 }
else if menuChoice == 7 { arrowY = 144 }

// Confirm
if kConfirm
{
    audio_stop_all();
    audio_play_sound(sndMenuNavigate, 9, false);
    room_goto(rmMainMenu);
}

// Sound

if kUp || kDown
{
    audio_play_sound(sndMenuNavigate, 9, false)
}
}

if instance_exists(objMainMenu_SelDifficulty) flavorText = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.Font);
draw_set_halign(fa_left);
draw_set_color(c_white);
draw_set_alpha(1);

draw_sprite(sprBigBolt, 0, view_xview[0]/2+112, (view_yview[0]/2)+32);
draw_text(view_xview[0]/2+128, (view_yview[0]/2)+32, global.boltCurrency);

draw_text(view_xview[0]/2+64, (view_yview[0]/2)+48, "EXTRA LIFE");
draw_text(view_xview[0]/2+64, (view_yview[0]/2)+64, "E TANK");
draw_text(view_xview[0]/2+64, (view_yview[0]/2)+80, "W TANK");
draw_text(view_xview[0]/2+64, (view_yview[0]/2)+96, "ENERGY BALANCER");
draw_text(view_xview[0]/2+64, (view_yview[0]/2)+112, "SPIKE GUARD");
draw_text(view_xview[0]/2+64, (view_yview[0]/2)+128, "RCI INPUT");
draw_text(view_xview[0]/2+64, (view_yview[0]/2)+144, "BACK");
    
draw_set_halign(fa_center);
draw_text(view_xview[0]/2+128, (view_yview[0]/2)+176, flavorText);

draw_set_halign(fa_left);
draw_sprite(sprMenuArrow, 0, (view_xview[0]+48) + arrowTimer, view_yview[0] + arrowY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
