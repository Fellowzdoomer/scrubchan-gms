<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuChoice = 1;
flavorText = "A CHOICE HAS YET TO BE MADE!"

arrowTimer = 0;
arrowTimerMode = 0; // 0 - plus, 1 - minus
arrowY = 16;

playerOneReady = false;
playerTwoReady = false;

global.playerOneClass = 1;
global.playerTwoClass = 2;

p1 = sprPlayer;
p2 = sprQuintIdle;

// 1 - megaman
// 2 - quint
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kLeft = keyboard_check_released(vk_left)
kRight = keyboard_check_released(vk_right)
kConfirm = keyboard_check_released(ord("X"))

kLeftGP = gamepad_button_check_released(0,gp_padl);
kRightGP = gamepad_button_check_released(0,gp_padr);
kConfirmGP = gamepad_button_check_released(0,gp_face1);

if keyboard_check_released(vk_f4)
{
    if !window_get_fullscreen() window_set_fullscreen(true);
    else window_set_fullscreen(false);
}

if keyboard_check_released(vk_escape)
{
    audio_stop_all();
    room_goto(arbitraryCode);
}

// Changing characters (Display)
switch global.playerOneClass
{
    case 0:
    p1 = sprChat;
    break;
    
    case 1:
    p1 = sprPlayer;
    break;
    
    case 2:
    p1 = sprQuintIdle;
    break;
}

switch global.playerTwoClass
{
    case 0:
    p2 = sprChat;
    break;
    
    case 1:
    p2 = sprPlayer;
    break;
    
    case 2:
    p2 = sprQuintIdle;
    break;
}

// Switching class (variable)

if !playerOneReady
{
    if kLeft global.playerOneClass -= 1;
    if kRight global.playerOneClass += 1;
}
if !playerTwoReady
{
    if kLeftGP global.playerTwoClass -= 1;
    if kRightGP global.playerTwoClass += 1;
}

// Confirming if players are ready
if kConfirm
{
    if !playerOneReady { playerOneReady = true; audio_play_sound(sndMenuNavigate,0,false); }
    else { playerOneReady = false; audio_play_sound(sndDeny,0,false); }
}

if kConfirmGP
{
    if !playerTwoReady { playerTwoReady = true; audio_play_sound(sndMenuNavigate,0,false); }
    else { playerTwoReady = false; audio_play_sound(sndDeny,0,false); }
}

// for testing
if playerOneReady &amp;&amp; playerTwoReady room_goto(multiplayerBoi)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0)
draw_set_halign(fa_left);
draw_set_color(c_white)

draw_text(80,8,"Secret 1v1 minigame")
draw_text(view_xview[0]/2+32, (view_yview[0]/2)+24, "Player One")

if gamepad_is_connected(0)
{
    draw_text(view_xview[0]/2+176, (view_yview[0]/2)+24, "Player Two")
}
else
{
    draw_text(view_xview[0]/2+144, (view_yview[0]/2)+24, "Controller not detected")
}


// player one
draw_sprite(sprMenuArrow,0,view_xview[0]+62, (view_yview[0]/2) + 80)
draw_sprite(sprMenuArrow2,0,view_xview[0]+32, (view_yview[0]/2) + 80)
draw_sprite(p1,0,view_xview[0]+48, (view_yview[0]/2) + 80)

// player two
draw_sprite(sprMenuArrow,0,view_xview[0]+222, (view_yview[0]/2) + 80)
draw_sprite(sprMenuArrow2,0,view_xview[0]+192, (view_yview[0]/2) + 80)
draw_sprite(p2,0,view_xview[0]+208, (view_yview[0]/2) + 80)

// Ready text
if playerOneReady draw_text(view_xview[0]+32,144,"READY");
if playerTwoReady draw_text(view_xview[0]+176,144,"READY");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
