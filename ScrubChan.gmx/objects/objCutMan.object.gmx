<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCutmanPose</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBossParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// [Damage Values]]

dmg_BusterShot = 1;

/*
dmg_wep1
dmg_wep2
dmg_wep3
dmg_wep4
dmg_wep5
dmg_wep6
dmg_wep7
dmg_wep8
*/


global.hpBar_rgb1 = make_color_rgb(225,0,88);
global.hpBar_rgb2 = make_color_rgb(255,255,255);

hasScissors = true;

sprite_index = sprCutmanRun
image_speed = 10/60;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if facePlayer
{
    if x &gt; objPlayer.x { image_xscale = -1; }
    else { image_xscale = 1; }
}
    
if !didIntroduction
{
    with objPlayer 
    {
        lockInput = true;
        if didTeleport sprite_index = sprPlayer
    }
    if !got_tDest
    {
        tDestX = x;
        tDestY = y;
        y -= 256
        got_tDest = true;
    }
    
    if !landed 
    {
        if (!place_meeting(x,y+8,objSolid) || y != tDestY)
        {
            sprite_index = sprCutmanJump;
            y += 8;
        }
        else { sprite_index = sprCutmanPose; landed = true; }
    }
    else
    {
        image_speed = 0;
        enemyTimer += 1;
        if enemyTimer == 15
        {
            sprite_index = sprCutmanPose;
            image_speed = 10/60;
        }
        else if enemyTimer == 30
        {
            if global.bossHP &lt; 28 
            {
                global.bossHP += 1;
                audio_play_sound(sndRecoverHP,8,false)
                enemyTimer = 27;
            }
        }
        else if enemyTimer == 35
        {
            sprite_index = sprCutmanPose;
            image_index = 0;
            image_speed = 10/60;
            enemyTimer = 0;
            didIntroduction = true;
            with objPlayer lockInput = false;
        }
    }
}
else
{
if global.bossHP &lt;= 0 
{
    if !didDeathExplosion
    {
        audio_stop_all();
        instance_create(x,y,objExplosionSpawner)
        enemyTimer = 0;
        didDeathExplosion = true;
    }
    isAlive = false;
    visible = false;
    
    if room != rmTestingChamber
    {
        enemyTimer += 1;
        if enemyTimer == 180
        {
            with objPlayer lockInput = true; sprite_index=sprPlayer;
            audio_play_sound(bgmVictory,0,false);
        }
        else if enemyTimer == 480 room_goto(rmSimulationSelect);
    }
    else
    {
        if enemyTimer == 0
        {
            instance_create(x,y,objBigHealth);
            enemyTimer = 1;
        }
    }
}

if isAlive == true &amp; !global.inMenu
{
    b_genericCutmanCheck();
    prevX = x;
    prevY = y;
    enemyTimer += 1;
    
        if !ignoreGravity enemyGravity(); 
        {
            if enemyTimer == 50
            {
                if global.bossHP &gt; 9
                {
                    attack = irandom_range(1,6);
                }
                
                else
                {
                    if didDesperation == false attack = 6;
                    else attack = irandom_range(1,6);
                }
            }
        }
        if (place_meeting(x,y,objBusterShot))
        {
            with objBusterShot.id { audio_play_sound(sndEnemyHit, 9, false); instance_destroy(); }
            if !invulnerable &amp;&amp; !desperationInvuln global.bossHP -= dmg_BusterShot;
            
            if !isHit isHit = true;
        }
        
        if isHit
        {
            invulnerable = true;
            enemyTimer2 += 1;
            if enemyTimer2 &gt;= hitTimer
            {
                enemyTimer2 = 0;
                isHit = false;
            }
        }
        
        if invulnerable == true
        {
            invulnTimer += 1;
            if invulnTimer % 2 == 0 {visible = false; } else {visible = true; }
            if invulnTimer == 128
            {
                visible = true;
                invulnerable = false;
                invulnTimer = 0;
            }
        }

}

if global.inMenu
{
    x = prevX;
    y = prevY;
}

// Because I can't define attacks in a better way.

if !global.inMenu and isAlive
{

    switch attack
    {
        case 1: b_cutManRunTowardsPlayer(); break;
        case 2: b_cutManJumpTowardsPlayer(); break;
        case 3: b_cutManRunTowardsPlayer(); break;
        case 4: b_cutManJumpTowardsPlayer(); break;
        case 5: b_cutManThrowScissors(); break;
        case 6: b_cutManThrowScissors(); break;
        case 7: b_cutManRunTowardsPlayer(); break;
    }
}

}
y += vsp;
x += hsp;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
