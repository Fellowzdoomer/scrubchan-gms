<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemyHP = 1;
initialEnemyHP = 1;
// [Damage Values]]

dmg_BusterShot = 1;

/*
dmg_wep2
dmg_wep3
dmg_wep4
dmg_wep5
dmg_wep6
dmg_wep7
dmg_wep8
*/

isActive = false;
isAlive = true;
didDeathExplosion = false;
isHit = false;
isHitByLimbo = false; //for combo
limboHitter = 0;

hitTimer = 5;

isSideReflective = false;
hsp = 0;
vsp = 0;
enemyTimer = 0;

origX = x;
origY = y;

droppedItem = false;
facePlayer = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((bbox_right &gt; view_xview[0]) &amp;&amp; (bbox_left &lt; view_xview[0] + view_wview[0]) &amp;&amp; (bbox_bottom &gt; view_yview[0]) &amp;&amp; (bbox_top &lt; view_yview[0] + view_hview[0])) {
   isActive = true;
}
else {
    isActive = false;
    x = origX;
    y = origY;
    }

if enemyHP &lt;= 0 
{
    // thanks reddit
    var centerX = x - sprite_get_xoffset(sprite_index) + sprite_width / 2;
    var centerY = y - sprite_get_yoffset(sprite_index) + sprite_height / 2;
    if !didDeathExplosion
    {
        instance_create(centerX,centerY,objExplosion3);
        didDeathExplosion = true;
    }
    isAlive = false;
    enemyTimer = 1;
    visible = false;
}

if isAlive
{
    if facePlayer
    {
        if x &gt; objPlayer.x { image_xscale = -1; }
        else { image_xscale = 1; }
    }
    
    if (place_meeting(x+(1*image_xscale),y,objBusterShot))
    {
        if !isSideReflective
        {
            with objBusterShot.id { instance_destroy(); }
            audio_play_sound(sndEnemyHit, 9, false);
            enemyHP -= 1;
            if !isHit isHit = true;
        }
        else
        {
            with objBusterShot.id
            {
                hsp = -hsp;
                vsp = -6;
            }
        }
    }
    
    if (place_meeting(x,y,objLimboMelee))
    {
         audio_play_sound(sndEnemyHit, 9, false);
         enemyHP -= 1;
         if !isHitByLimbo isHitByLimbo = true;
    }
    
    if isHitByLimbo
    {
        if (limboHitter &lt; global.limboCount)
        {
            isHit = false;
            audio_play_sound(sndEnemyHit, 9, false);
            limboHitter += 1;
            enemyHP -= 1;
            isHit = true;
        }
        else
        {
            isHit = true;
            isHitByLimbo = false;
        }
    }
    
    if isHit
    {
        enemyTimer += 1;
        if enemyTimer &gt;= hitTimer
        {
            enemyTimer = 0;
            isHit = false;
        }
    }
}
else
{
    hsp = 0;
    image_index = 0;
    if !droppedItem
    {
        var roll = irandom(9);
        var itemToDrop = objSmallHealth;
        switch roll
        {
            case 1: itemToDrop = objSmallHealth; break;
            case 2: itemToDrop = objBigHealth; break;
            case 3: itemToDrop = objSmallWeaponEnergy; break;
            case 4: itemToDrop = objBigWeaponEnergy; break;
            case 5: itemToDrop = objSmallBolt; break;
            case 6: itemToDrop = objBigBolt; break;
            case 9: itemToDrop = objLife; break;
        }
        
        var createItem = instance_create(x,y,itemToDrop);
        createItem.isDropped = true;
        
        droppedItem = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemyHP = initialEnemyHP;
enemyTimer = 0;
isAlive = true;
didDeathExplosion = false;
isHit = false;
visible = true;

hsp = 0;
vsp = 0;
image_index = 0;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if isHit
{
    shader_set(shd_WhiteSprite);
    draw_self();
    shader_reset();
}
else
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
