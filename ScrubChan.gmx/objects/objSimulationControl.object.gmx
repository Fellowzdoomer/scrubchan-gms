<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMetalSimulation</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>simulationText = "SIMULATION TEXT";
menuChoice = 0;
startTimer = false;
timer = 0;
fadeTimer = 0;
alphaVal = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !startTimer
{
    kLeft = keyboard_check_released(vk_left);
    kRight = keyboard_check_released(vk_right);
    
    if kLeft|kRight audio_play_sound(sndMenuNavigate,0,false); show_debug_message("choice: " + string(menuChoice));
    
    if kLeft
    {
        if menuChoice &gt; 0 menuChoice -= 1; else menuChoice = 3;
    }
    if kRight
    {
        if menuChoice &lt; 3 menuChoice += 1; else menuChoice = 0;
    }
}

kConfirm = keyboard_check_released(ord("X"));
    
if startTimer == true timer += 1; show_debug_message(timer);

if timer == 30 instance_create(0,0,transitionControl); simulationText = "";
if timer &gt;= 150
{
    if menuChoice == 3 game_end();
    else if menuChoice == 0
    {
        alphaVal = 1;
        room_goto(rmDemoSettings);
    }
    else if menuChoice == 1
    {
        alphaVal = 1; 
        room_goto(stgDemoMetal);
    }
    else if menuChoice == 2
    {
        alphaVal = 1;
        room_goto(stgDemoCut);
    }
    else room_restart();
}

if startTimer
{
    if timer &lt; 100
    {
        if alphaVal &gt; 0 alphaVal -= 0.01;
    }
}
if kConfirm
{
        startTimer = true;
        audio_stop_all();
        audio_play_sound(sndTeleportOut,9,false);
}

switch menuChoice
{
    case 0: simulationText = "SETTINGS"; break;
    case 1: simulationText = "METAL MAN"; break;
    case 2: simulationText = "CUT MAN"; break;
    case 3: simulationText = "END SIMULATION"; break;
    default: simulationText = "SIMULATION TEXT"; break;
}
image_index = menuChoice;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.Font);
draw_set_color(c_white);
draw_set_halign(fa_center);

draw_sprite_ext(sprMetalSimulation,menuChoice,room_width/2,room_height/2,2,2,0,c_white,alphaVal);
if menuChoice+1 &lt;= 3 draw_sprite_ext(sprMetalSimulation,menuChoice+1,room_width/2+64,room_height/2,1,1,0,c_white,alphaVal-0.5);
else draw_sprite_ext(sprMetalSimulation,0,room_width/2+64,room_height/2,1,1,0,c_white,alphaVal-0.5);

if menuChoice-1 &gt;= 0 draw_sprite_ext(sprMetalSimulation,menuChoice-1,room_width/2-64,room_height/2,1,1,0,c_white,alphaVal-0.5);
else draw_sprite_ext(sprMetalSimulation,3,room_width/2-64,room_height/2,1,1,0,c_white,alphaVal-0.5);

draw_sprite_ext(sprMenuArrow2,0,16,112,2,2,0,c_white,alphaVal);
draw_sprite_ext(sprMenuArrow,0,240,112,2,2,0,c_white,alphaVal);

draw_set_alpha(alphaVal);
draw_text(room_width/2,(room_height/2)+64,simulationText);

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
